############################################################################
#
#  Program:  OpenSees
#
#  Purpose:  A Top-level Makefile to create the libraries needed
#	     to use the OpenSees framework.
#            and below.
#
#  Written: fmk
#  Created: 10/99
#
#  Send bug reports, comments or suggestions to fmckenna@ce.berkeley.edu
#
#  Modified by Seokho Jeong for Mac OS X 10.11 El Capitan with
#  Accelerate framework and Homebrew
#  Modified by Maxim Millen for Mac OSX 10.15 with Python 3.7
#  Modified by Maxim Millen and Alex Pletzer to build on NeSI's mahuika HPC
#
############################################################################
# Prerequisites
# - Install Active TCL 8.5 for mac OS X
# - Install Homebrew
# - brew install gcc
# - brew install openmpi (for parallel versions)
# - brew install mumps (for parallel versions)
# - brew install python

# steps
# 1) set HOME as path to repo
# 2) change path to gcc if not gcc-10
# 	-L/usr/local/opt/gcc/lib/gcc/10/
# 3) set path to Python `PYTHON_INCLUDES`
# 4) set path to a python virtual environment PYTHON_VENV (not sure if this is necessary)
#	e.g. PYTHON_VENV = /Users/maximmillen/git/packages/OpenSees/venv
# 4b) set PYTHON_LIBRARY
# 5) run `make python`

# Need to load `ml OpenMPI/4.1.1-GCC-9.2.0` and `ml Tcl`

INTERPRETER_LANGUAGE = PYTHON
#INTERPRETER_LANGUAGE = TCL

# TODO: Add to travis build - since it supports macOS

# %---------------------------------%
# |  SECTION 1: PROGRAM             |
# %---------------------------------%
#
# Specify the location and name of the OpenSees interpreter program
# that will be created (if this all works!)

HOME = ${CHOME}

PROGRAMMING_MODE = PARALLEL_INTERPRETERS

OpenSees_PROGRAM = $(HOME)/bin/OpenSees

ifeq ($(PROGRAMMING_MODE), PARALLEL)
OpenSees_PROGRAM = $(HOME)/bin/OpenSeesSP
PROGRAMMING_FLAG = -D_PARALLEL_PROCESSING
endif

ifeq ($(PROGRAMMING_MODE), PARALLEL_INTERPRETERS)
  OpenSees_PROGRAM = $(HOME)/bin/OpenSeesMP
  PROGRAMMING_FLAG = -D_PARALLEL_INTERPRETERS
endif

OPERATING_SYSTEM = LINUX

DEBUG_MODE       = NO_DEBUG
RELIABILITY      = NO_RELIABILITY

GRAPHICS         = NONE
GRAPHIC_FLAG     = -D_NOGRAPHICS
GRAPHIC_LIBRARY  =
AGL_OBJS         =
RELIABILITY = YES_RELIABILITY
RELIABILITY_FLAG = -D_RELIABILITY

# %---------------------------------%
# |  SECTION 2: PATHS               |
# %---------------------------------%
#
# Note: if vendor supplied BLAS and LAPACK libraries or if you have
# any of the libraries already leave the directory location blank AND
# remove the directory from DIRS.

BASE = /usr

FE	 = $(HOME)/SRC

BLASdir         =
CBLASdir        =
LAPACKdir       =
SUPERLUdir      =
SUPERLU_DISTdir = $(HOME)/OTHER/SuperLU_DIST_4.3/SRC
ARPACKdir       =
UMFPACKdir      = 
METISdir        = 
AMDdir	        =
CSPARSEdir      = $(HOME)/OTHER/CSPARSE
ITPACKdir       = $(HOME)/OTHER/ITPACK
SRCdir          = $(HOME)/SRC
PYdir          = $(HOME)/SRC/interpreter


DIRS = $(SUPERLU_DISTdir) \
       $(CSPARSEdir) \
       $(ITPACKdir) \
       $(SRCdir)

# %-------------------------------------------------------%
# | SECTION 3: LIBRARIES                                  |
# |                                                       |
# | The following section defines the libraries that will |
# | be created and/or linked with when the libraries are  |
# | being created or linked with.                         |
# %-------------------------------------------------------%
#
# Note: if vendor supplied BLAS and LAPACK libraries leave the
# libraries blank. You have to get your own copy of the tcl/tk
# library!!
#
# Note: For libraries that will be created (any in DIRS above)
# make sure the directory exists where you want the library to go!

FE_LIBRARY      = $(HOME)/lib/libOpenSees.a
RELIABILITY_LIBRARY = $(HOME)/lib/libReliability.a
OPTIMIZATION_LIBRARY = $(HOME)/lib/libOptimization.a
NDARRAY_LIBRARY = $(HOME)/lib/libndarray.a # BJ_UCD jeremic@ucdavis.edu
MATMOD_LIBRARY  = $(HOME)/lib/libmatmod.a  # BJ_UCD jeremic@ucdavis.edu
BJMISC_LIBRARY  = $(HOME)/lib/libBJmisc.a  # BJ_UCD jeremic@ucdavis.edu
LAPACK_LIBRARY  =
BLAS_LIBRARY    = 
CBLAS_LIBRARY   =
SUPERLU_LIBRARY = $(EBROOTSUPERLU)/lib64/libsuperlu.so
ARPACK_LIBRARY  = $(EBROOTARPACKMINNG)/lib64/libarpack.so
UMFPACK_LIBRARY = -lumfpack
METIS_LIBRARY   =
AMD_LIBRARY	    = -lamd
ITPACK_LIBRARY  = $(HOME)/lib/libItpack.a
CSPARSE_LIBRARY = $(HOME)/lib/libcsparse.a  # should be able to use SuiteSparse copy instead
TCL_LIBRARY     = $(EBROOTTCL)/lib/libtcl8.6.so
TCL_DIST_LIBRARY = $(HOME)/lib/libOpenSeesTclCommands.a


DISTRIBUTED_SUPERLU_LIBRARY = $(HOME)/lib/libDistributedSuperLU.a

BLITZ_LIBRARY = $(HOME)/blitz/lib/libblitz.a
GRAPHIC_LIBRARY     =

# WATCH OUT .. These libraries are removed when 'make wipe' is invoked.
WIPE_LIBS = $(FE_LIBRARY) \
            $(NDARRAY_LIBRARY) \
            $(MATMOD_LIBRARY) \
            $(BJMISC_LIBRARY) \
            $(ITPACK_LIBRARY) \
            $(CSPARSE_LIBRARY) \
            $(RELIABILITY_LIBRARY) \
            $(DISTRIBUTED_SUPERLU_LIBRARY) \
            $(TCL_DIST_LIBRARY)

# %---------------------------------------------------------%
# | SECTION 4: COMPILERS                                    |
# |                                                         |
# | The following macros specify compilers, linker/loaders, |
# | the archiver, and their options.  You need to make sure |
# | these are correct for your system.                      |
# %---------------------------------------------------------%

# Compilers

CC++  = mpicxx -std=c++14
CC    = mpicc  -std=c18 -Wimplicit-function-declaration
FC	  = gfortran

LINKER    = $(CC++)
LINKFLAGS =

AR		    = ar
ARFLAGS		= cqls
RANLIB		= ranlib
RANLIBFLAGS =

# Compiler Flags
#
# NOTES:
#    C++ FLAGS TAKE need _UNIX or _WIN32 for preprocessor directives
#         - the _WIN32 for the Windows95/98 or NT operating system.
#    C FLAGS used -DUSE_VENDOR_BLAS (needed in SuperLU) if UNIX in C++ FLAGS
#

# modified as optimizaton currently causing problems with Steeln01 code
ifeq ($(DEBUG_MODE), DEBUG)
C++FLAGS = -Wall -D_LINUX -D_UNIX  -D_TCL85  -D_AMDn \
	       $(GRAPHIC_FLAG) $(RELIABILITY_FLAG) $(DEBUG_FLAG) $(MUMPS_FLAG) \
	       $(PROGRAMMING_FLAG) -g -O3
CFLAGS   = -Wall -O3 -g -DUSE_VENDOR_BLAS
FFLAGS   = -Wall -O -DCUBLAS -x f77-cpp-input --no-second-underscore
LINKFLAGS       = -g -pg

else
ifeq ($(INTERPRETER_LANGUAGE), PYTHON)
C++FLAGS         = -D_LINUX -D_UNIX  -D_TCL85 -D_AMDn -D_MACOSX \
	$(GRAPHIC_FLAG) $(RELIABILITY_FLAG) $(DEBUG_FLAG) $(MUMPS_FLAG) \
	$(PROGRAMMING_FLAG) -g -O3 -fPIC
CFLAGS          = -Wall -g -O3 -DUSE_VENDOR_BLAS -D_USE_METIS_5p1  -fPIC
FFLAGS          = -Wall -g -O3 -fPIC

# Linker
LINKER          = $(CC++)
LINKFLAGS       = -g -fPIC
else
C++FLAGS = -Wall -D_LINUX -D_UNIX  -D_TCL85  -D_AMDn -D_MACOSX \
	       $(GRAPHIC_FLAG) $(RELIABILITY_FLAG) $(DEBUG_FLAG) $(MUMPS_FLAG) \
	       $(PROGRAMMING_FLAG) -O3 -march=native -D_NO_PARALLEL_FILESYSTEM
CFLAGS   = -Wall -O2 -DUSE_VENDOR_BLAS -D_USE_METIS_5p1
FFLAGS   = -Wall -O -DCUBLAS -x f77-cpp-input --no-second-underscore
endif
endif

# Misc
MAKE		= make
CD          = cd
ECHO        = echo
RM          = rm
RMFLAGS     = -f
SHELL       = /bin/sh

# %---------------------------------------------------------%
# | SECTION 5: COMPILATION                                  |
# |                                                         |
# | The following macros specify the macros used in         |
# | to compile the source code into object code.            |
# %---------------------------------------------------------%

.SUFFIXES:
.SUFFIXES:	.C .c .f .f90 .cpp .o .cpp

#
# %------------------%
# | Default command. |
# %------------------%
#
.DEFAULT:
	@$(ECHO) "Unknown target $@, try:  make help"
#
# %-------------------------------------------%
# |  Command to build .o files from .f files. |
# %-------------------------------------------%
#

.cpp.o:
	@$(ECHO) Making $@ from $<
	$(CC++) $(C++FLAGS) $(INCLUDES) -c $< -o $@

.C.o:
	@$(ECHO) Making $@ from $<
	$(CC++) $(C++FLAGS) $(INCLUDES) -c $< -o $@
.c.o:
	@$(ECHO) Making $@ from $<
	$(CC) $(CFLAGS) -c $< -o $@
.f.o:
	@$(ECHO) Making $@ from $<
	$(FC) $(FFLAGS) -c $< -o $@

# %---------------------------------------------------------%
# | SECTION 6: OTHER LIBRARIES                              |
# |                                                         |
# | The following macros specify other libraries that must  |
# | be linked with when creating executables. These are     |
# | platform specific and typically order does matter!!     |
# %---------------------------------------------------------%

SCALAPACK = YES
SCALAPACK_DIR = $(EBROOTIMKL)/mkl
SCALAPACK_INCLUDE = $(SCALAPACK_DIR)/include
SCALAPACK_FLAG = -D_SCALAP
SCALAPACK_LIB = $(SCALAPACK_DIR)/lib/intel64_lin/

# Use Mumps from Homebrew
MUMPS = YES
MUMPS_DIR = $(EBROOTMUMPS)
MUMPS_FLAG = -D_MUMPS
MUMPS_INCLUDE = $(MUMPS_DIR)/include
MUMPS_LIB = -L$(MUMPS_DIR)/lib -L$(SCALAPACK_LIB) -ldmumps -lmumps_common -lpord -l$(SCALAPACK_DIR)/lib/intel64_lin/libmkl_scalapack.a

SCOTCH_LIBRARIES = -L$(EBROOTSCOTCH)/lib -lesmumps -lptscotch -lscotch -lscotcherr

# the following tool can be used to figure out which MKL libraries to link against
# https://www.intel.com/content/www/us/en/developer/tools/oneapi/onemkl-link-line-advisor.html
MKL_LIBRARIES = -L$(EBROOTIMKL)/mkl/lib/intel64 -lmkl_scalapack_lp64 \
                -lmkl_blacs_intelmpi_lp64 -lmkl_core -lmkl_gnu_thread -lmkl_rt


MACHINE_LINKLIBS  =

MACHINE_NUMERICAL_LIBS  =  \
		$(RELIABILITY_LIBRARY) \
		$(ARPACK_LIBRARY) \
		$(SUPERLU_LIBRARY) \
		$(UMFPACK_LIBRARY) \
	    $(AMD_LIBRARY) \
	    $(ITPACK_LIBRARY) \
	    $(LAPACK_LIBRARY) \
	    $(CSPARSE_LIBRARY) \
		$(BLAS_LIBRARY) \
		$(CBLAS_LIBRARY) \
		$(GRAPHIC_LIBRARY)\
		$(FORTO) \
		$(CUDA_LIB)
		

# -ldl -lgcc -lgfortran
# -ldl -L/usr/local/opt/gcc/lib/gcc/10/gcc/10/ -lgfortran
MACHINE_SPECIFIC_LIBS =

METIS_PARA_DIR = $(EBROOTMETIS)

PARALLEL_LIB = 	$(FE)/system_of_eqn/linearSOE/sparseGEN/DistributedSuperLU.o \
	$(FE)/system_of_eqn/linearSOE/sparseGEN/DistributedSparseGenColLinSOE.o \
	$(DISTRIBUTED_SUPERLU_LIBRARY) $(MUMPS_LIB) $(METIS_PARA_DIR)/lib/libmetis.a \
	$(SCOTCH_LIBRARIES) $(MKL_LIBRARIES) \
	-lgfortran -lgomp -lm -lc -ldl

# %---------------------------------------------------------%
# | SECTION 7: INCLUDE FILES                                |
# |                                                         |
# | The following macros specify include files needed for   |
# | compilation.                                            |
# %---------------------------------------------------------%

MACHINE_INCLUDES        = -I/usr/include \
			  -I$(BASE)/include \
			  -I/usr/local/include \
			  -I/usr/include/cxx \
              -I$(FE)/../OTHER/SuperLU_DIST_4.3/SRC \
			  -I$(MUMPS_INCLUDE) -I$(SCALAPACK_INCLUDE) \
			  -I$(METIS_PARA_DIR)/include/

# this file contains all the OpenSees/SRC includes
include $(FE)/Makefile.incl


TCL_INCLUDES = -I$(EBROOTMINICONDA3)/include

# find out where Python.h is installed from the current python command on Linux
PYTHON_EXE := $(shell which python)
PYTHON_BINDIR := $(dir $(PYTHON_EXE))
PYTHON_VER := $(shell python -c "import sys; print('%d.%d' % sys.version_info[:2])")
PYTHON_INCLUDES := -I$(PYTHON_BINDIR)../include/python$(PYTHON_VER)

INCLUDES = $(TCL_INCLUDES) $(FE_INCLUDES) $(MACHINE_INCLUDES) $(PYTHON_INCLUDES)
